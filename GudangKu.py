# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Python Scripts\PEMVIS\GudangKu-.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import sqlite3
import csv
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import QRegExpValidator
from PyQt5.QtCore import QRegExp
from datetime import datetime


class Ui_MainWindow(object):

    def tampilkan_data(self):
        try:
            conn = sqlite3.connect("gudang.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM barang")
            hasil = cursor.fetchall()
            conn.close()

            self.tableWidget.setRowCount(len(hasil))
            self.tableWidget.setColumnCount(8)  # total kolom (id, nama, kategori, stok, harga, tgl_masuk, tgl_kadaluarsa, status)
            self.tableWidget.setHorizontalHeaderLabels(["ID", "Nama Barang", "Kategori", "Stok", "Harga", "Tgl Masuk", "Tgl Kadaluarsa", "Status"])

            for row_index, row_data in enumerate(hasil):
                for col_index, value in enumerate(row_data):
                    if col_index == 4:
                        item = QtWidgets.QTableWidgetItem(f"{float(value):.3f}")
                    else:
                        item = QtWidgets.QTableWidgetItem(str(value))
                    self.tableWidget.setItem(row_index, col_index, item)

            self.tableWidget.resizeColumnsToContents()

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Gagal menampilkan data:\n{str(e)}")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Aplikasi GudangKu")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.resize(900, 650)
        MainWindow.setStyleSheet("")
        
        # Central Widget dan Main Layout
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Main horizontal layout untuk membagi central widget dan dock widget
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        
        # Tab Widget (Bagian utama)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        
        # Tab 1: Input Barang
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_2.setContentsMargins(10, 10, 10, 10)
        
        # Komponen Tab 1
        self.label_10 = QtWidgets.QLabel("GudangKu")
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_2.addWidget(self.label_10)
        
        self.formLayout_2 = QtWidgets.QFormLayout()
        
        # Tambahkan semua komponen form seperti sebelumnya
        self.label = QtWidgets.QLabel("Nama Barang :")
        self.nama_barang = QtWidgets.QLineEdit()
        self.formLayout_2.addRow(self.label, self.nama_barang)
        
        self.label_2 = QtWidgets.QLabel("Kategori :")
        self.kategori = QtWidgets.QComboBox()
        self.kategori.addItems(["","Minuman", "Makanan", "Kebutuhan Rumah Tangga", "Alat Tulis", "Lainnya"])
        self.formLayout_2.addRow(self.label_2, self.kategori)
        
        self.label_3 = QtWidgets.QLabel("Stok :")
        self.stok = QtWidgets.QSpinBox()
        self.formLayout_2.addRow(self.label_3, self.stok)
        
        self.label_4 = QtWidgets.QLabel("Harga (per pcs) :")
        self.harga_brng = QtWidgets.QDoubleSpinBox()
        self.stok.setMaximum(10000)
        self.harga_brng.setDecimals(3)
        self.harga_brng.setMaximum(1000000.0)
        self.harga_brng.setPrefix("Rp ")
        self.formLayout_2.addRow(self.label_4, self.harga_brng)
        
        self.label_5 = QtWidgets.QLabel("Tanggal Masuk :")
        self.tgl_masuk = QtWidgets.QDateEdit()
        self.formLayout_2.addRow(self.label_5, self.tgl_masuk)

        self.label_6 = QtWidgets.QLabel("Tanggal Kadaluarsa :")
        self.tgl_kdluarsa = QtWidgets.QDateEdit()
        self.formLayout_2.addRow(self.label_6, self.tgl_kdluarsa)

        self.checkNoExpired = QtWidgets.QCheckBox("Tidak memiliki tanggal kadaluarsa")
        self.formLayout_2.addRow("", self.checkNoExpired)

        for date_widget in [self.tgl_masuk, self.tgl_kdluarsa]:
            date_widget.setCalendarPopup(True)
            date_widget.setDisplayFormat("dd-MM-yyyy")

        self.btn_paste = QtWidgets.QPushButton("Paste dari Clipboard")
        self.btn_paste.setFixedSize(180, 30)
        self.btn_paste.clicked.connect(self.paste_from_clipboard)

        self.btn_simpan = QtWidgets.QPushButton("Simpan")
        self.btn_simpan.clicked.connect(self.simpan_data)
        self.formLayout_2.addRow(self.btn_paste, self.btn_simpan)
        
        self.verticalLayout_2.addLayout(self.formLayout_2)
        
        self.btn_bukafile = QtWidgets.QPushButton("Buka File .txt")
        self.verticalLayout_2.addWidget(self.btn_bukafile)
        self.btn_bukafile.clicked.connect(self.buka_file_txt)
        
        self.textEdit = QtWidgets.QTextEdit()
        self.verticalLayout_2.addWidget(self.textEdit)
        
        self.tabWidget.addTab(self.tab, "Input Barang")
        
        # Tab 2: Data Barang
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.tab_3)
        self.verticalLayout_3.setContentsMargins(10, 10, 10, 10)
        
        self.label_11 = QtWidgets.QLabel("GudangKu")
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_3.addWidget(self.label_11)
        
        self.label_9 = QtWidgets.QLabel("Cari Barang")
        self.cari_brng = QtWidgets.QLineEdit()
        self.cari_brng.textChanged.connect(self.filter_data)
        self.verticalLayout_3.addWidget(self.label_9)
        self.verticalLayout_3.addWidget(self.cari_brng)
        
        self.label_8 = QtWidgets.QLabel("Tabel Data Barang")
        self.tableWidget = QtWidgets.QTableWidget()
        self.tableWidget.cellDoubleClicked.connect(self.edit_data)
        self.verticalLayout_3.addWidget(self.label_8)
        self.verticalLayout_3.addWidget(self.tableWidget)
        
        self.pushButton_4 = QtWidgets.QPushButton("Hapus Barang")
        self.pushButton_4.clicked.connect(self.hapus_data)
        self.verticalLayout_3.addWidget(self.pushButton_4)
        
        self.tabWidget.addTab(self.tab_3, "Data Barang")
        
        # Tab 3: Ekspor
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_4.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout_4.setSpacing(8)

        self.label_12 = QtWidgets.QLabel("GudangKu")
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setFixedHeight(30)
        self.verticalLayout_4.addWidget(self.label_12)

        self.label_7 = QtWidgets.QLabel("Export Data Barang")
        self.label_7.setFixedHeight(25)
        self.verticalLayout_4.addWidget(self.label_7)

        self.pushButton_5 = QtWidgets.QPushButton("Export ke CSV")
        self.pushButton_5.setFixedHeight(35)
        self.pushButton_5.clicked.connect(self.export_ke_csv)
        self.verticalLayout_4.addWidget(self.pushButton_5)

        # Spacer agar tidak menekan dari bawah
        spacer = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacer)

        self.tabWidget.addTab(self.tab_2, "Ekspor")
        self.horizontalLayout.addWidget(self.tabWidget)
        
        # Dock Widget (Daftar Barang di sebelah kanan)
        self.dockWidget = QtWidgets.QDockWidget("Daftar Barang", MainWindow)
        self.dockWidget.setAllowedAreas(QtCore.Qt.RightDockWidgetArea)
        self.dockWidget.setFeatures(
            QtWidgets.QDockWidget.DockWidgetMovable |
            QtWidgets.QDockWidget.DockWidgetFloatable |
            QtWidgets.QDockWidget.DockWidgetClosable
        )
        
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        
        self.verticalLayout_dock = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_dock.setContentsMargins(5, 5, 5, 5)
        
        self.listWidget = QtWidgets.QListWidget()
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout_dock.addWidget(self.listWidget)
        
        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.dockWidget)
        
        # Status Bar
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setFont(QtGui.QFont("Arial", 12))
        MainWindow.setStatusBar(self.statusbar)

        # Menu Bar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 22))
        
        self.menuFile = QtWidgets.QMenu("File", self.menubar)
        self.actionBuka = QtWidgets.QAction("Buka File .txt", MainWindow)
        self.actionSimpan = QtWidgets.QAction("Simpan", MainWindow)
        self.actionEkspor = QtWidgets.QAction("Ekspor ke CSV", MainWindow)
        self.actionKeluar = QtWidgets.QAction("Keluar", MainWindow)

        self.actionBuka.triggered.connect(self.buka_file_txt)
        self.actionSimpan.triggered.connect(self.simpan_data)
        self.actionEkspor.triggered.connect(self.export_ke_csv)
        self.actionKeluar.triggered.connect(QtWidgets.qApp.quit)

        self.menuFile.addAction(self.actionBuka)
        self.menuFile.addAction(self.actionSimpan)
        self.menuFile.addAction(self.actionEkspor)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionKeluar)

        self.menuEdit = QtWidgets.QMenu("Edit", self.menubar)
        self.actionCari = QtWidgets.QAction("Cari Barang", MainWindow)
        self.actionDock = QtWidgets.QAction("Daftar Barang", MainWindow, checkable=True)
        self.actionDock.setChecked(True)

        # Tambahkan ke menu Edit
        self.menuEdit.addAction(self.actionCari)
        self.menuEdit.addAction(self.actionDock)
        
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())        

        self.statusbar.showMessage("Nama : Baiq Sindi Hanjani | NIM : F1D022115")

        MainWindow.setMenuBar(self.menubar)
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.tampilkan_data()
        self.muat_dock_list()
        self.actionCari.triggered.connect(lambda: self.tabWidget.setCurrentIndex(1) or self.cari_brng.setFocus())
        self.actionDock.triggered.connect(self.toggle_dock)
        self.checkNoExpired.stateChanged.connect(self.toggle_kadaluarsa)
        self.terapkan_stylesheet_tab()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "GudangKu"))

    def toggle_kadaluarsa(self, state):
        if self.checkNoExpired.isChecked():
            self.tgl_kdluarsa.setEnabled(False)
        else:
            self.tgl_kdluarsa.setEnabled(True)
    
    def paste_from_clipboard(self):
        try:
            clipboard = QtWidgets.QApplication.clipboard()
            text = clipboard.text()
            parts = [p.strip() for p in text.split(",")]

            if len(parts) >= 6:
                self.nama_barang.setText(parts[0])
                self.kategori.setCurrentText(parts[1])
                self.stok.setValue(int(parts[2]))
                self.harga_brng.setValue(float(parts[3]))
                self.tgl_masuk.setDate(QtCore.QDate.fromString(parts[4], "dd-MM-yyyy"))
                self.tgl_kdluarsa.setDate(QtCore.QDate.fromString(parts[5], "dd-MM-yyyy"))
            else:
                QMessageBox.warning(None, "Format Salah", 
                    "Clipboard harus berisi teks dengan format: Nama Barang, Kategori, Stok, Harga, Tanggal Masuk, Tanggal Kadaluarsa")

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Clipboard tidak valid:\n{str(e)}")

    
    def buka_file_txt(self):
        # Buka dialog untuk pilih file txt
        options = QtWidgets.QFileDialog.Options()
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(
            None,
            "Pilih File .txt",
            "",
            "Text Files (*.txt);;All Files (*)",
            options=options
        )

        # Jika user memilih file, baca dan tampilkan ke textEdit
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as file:
                    content = file.read()
                    self.textEdit.setPlainText(content)
            except Exception as e:
                QMessageBox.critical(None, "Error", f"Gagal membaca file:\n{str(e)}")

    def filter_data(self):
        keyword = self.cari_brng.text().lower()
        for i in range(self.tableWidget.rowCount()):
            match = False
            for j in range(self.tableWidget.columnCount()):
                item = self.tableWidget.item(i, j)
                if item and keyword in item.text().lower():
                    match = True
                    break
            self.tableWidget.setRowHidden(i, not match)
    
    def edit_data(self, row, column):
        if column == 7:  # Kolom status
            QMessageBox.information(None, "Tidak Bisa Edit", "Status tidak bisa diedit langsung.")
            return
        id_item = self.tableWidget.item(row, 0) 
        if not id_item:
            return

        barang_id = int(id_item.text())

        kolom_map = {
            1: ("nama", "Nama Barang"),
            2: ("kategori", "Kategori"),
            3: ("stok", "Stok"),
            4: ("harga", "Harga"),
            5: ("tgl_masuk", "Tanggal Masuk"),
            6: ("tgl_kadaluarsa", "Tanggal Kadaluarsa")
        }

        if column not in kolom_map:
            return

        kolom_db, label = kolom_map[column]
        old_value = self.tableWidget.item(row, column).text()

        baru, ok = QtWidgets.QInputDialog.getText(
            None, f"Edit {label}", f"{label}:", text=old_value
        )

        if ok and baru != old_value:
            try:
                # Validasi sederhana angka dan tanggal
                if kolom_db in ["stok"]:
                    baru = int(baru)
                elif kolom_db in ["harga"]:
                    baru = float(baru)
                elif kolom_db in ["tgl_masuk", "tgl_kadaluarsa"]:
                    datetime.strptime(baru, "%Y-%m-%d")  # validasi format

                # Update ke database
                conn = sqlite3.connect("gudang.db")
                cursor = conn.cursor()

                # Update nilai biasa
                cursor.execute(
                    f"UPDATE barang SET {kolom_db} = ? WHERE id = ?",
                    (baru, barang_id)
                )

                # Tambahan: jika yang diubah adalah stok
                if kolom_db == "stok":
                    if int(baru) == 0:
                        cursor.execute("UPDATE barang SET status = ? WHERE id = ?", ("Habis", barang_id))
                    else:
                        # Jangan ubah status kalau stok > 0
                        pass

                conn.commit()
                conn.close()

                QMessageBox.information(None, "Berhasil", f"{label} berhasil diperbarui.")
                self.tampilkan_data()
                self.muat_dock_list()

            except Exception as e:
                QMessageBox.critical(None, "Error", f"Gagal mengedit data:\n{str(e)}")


    def hapus_data(self):
        selected = self.tableWidget.currentRow()
        if selected < 0:
            QMessageBox.warning(None, "Peringatan", "Pilih baris yang ingin dihapus!")
            return

        id_item = self.tableWidget.item(selected, 0)
        if not id_item:
            QMessageBox.warning(None, "Peringatan", "Data tidak valid!")
            return

        id_barang = id_item.text()

        confirm = QMessageBox.question(None, "Konfirmasi", f"Yakin ingin menghapus?",
                                    QMessageBox.Yes | QMessageBox.No)

        if confirm == QMessageBox.Yes:
            try:
                conn = sqlite3.connect("gudang.db")
                cursor = conn.cursor()
                cursor.execute("DELETE FROM barang WHERE id=?", (id_barang,))
                conn.commit()
                conn.close()
                self.tampilkan_data()
                self.muat_dock_list()
                QMessageBox.information(None, "Sukses", "Data berhasil dihapus!")
            except Exception as e:
                QMessageBox.critical(None, "Error", f"Gagal menghapus data:\n{str(e)}")

    def export_ke_csv(self):
        try:
            # Ambil data dari database
            conn = sqlite3.connect("gudang.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM barang")
            rows = cursor.fetchall()
            conn.close()

            if not rows:
                QMessageBox.warning(None, "Peringatan", "Tidak ada data untuk diekspor.")
                return

            # Buka dialog simpan file
            filename, _ = QtWidgets.QFileDialog.getSaveFileName(
                None,
                "Simpan File CSV",
                "",
                "CSV Files (*.csv);;All Files (*)"
            )

            if filename:
                with open(filename, mode='w', newline='', encoding='utf-8') as file:
                    writer = csv.writer(file)
                    # Tulis header
                    writer.writerow(["ID", "Nama", "Kategori", "Stok", "Harga", "Tanggal Masuk", "Tanggal Kadaluarsa", "Status"])
                    # Tulis data
                    writer.writerows(rows)

                QMessageBox.information(None, "Sukses", f"Data berhasil diekspor ke:\n{filename}")

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Gagal mengekspor data:\n{str(e)}")

    def muat_dock_list(self):
        try:
            conn = sqlite3.connect("gudang.db")
            cursor = conn.cursor()
            cursor.execute("SELECT nama, status, stok FROM barang")
            data = cursor.fetchall()
            conn.close()

            self.listWidget.clear()  # kosongkan list sebelumnya

            for nama, status, stok in data:
                if status:  # jika status tidak kosong
                    teks = f"{nama} - {status}"
                else:  # jika status kosong, tampilkan stok
                    teks = f"{nama} - Stok: {stok}"
                self.listWidget.addItem(teks)

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Gagal memuat daftar barang:\n{str(e)}")

    def toggle_dock(self):
        is_checked = self.actionDock.isChecked()
        self.dockWidget.setVisible(is_checked)

    def simpan_data(self):
        nama = self.nama_barang.text()
        kategori = self.kategori.currentText()
        stok = self.stok.value()
        harga = self.harga_brng.value()
        tgl_masuk = self.tgl_masuk.date().toString("yyyy-MM-dd")

        if not nama:
            QMessageBox.warning(None, "Peringatan", "Form Harus Terisi Semua!")
            return
        elif not kategori:
            QMessageBox.warning(None, "Peringatan", "Form Harus Terisi Semua!")
            return
        elif self.harga_brng.value() <= 0:
            QMessageBox.warning(None, "Peringatan", "Harga barang harus lebih dari 0!")
            return
        elif self.stok.value() < 0:
            QMessageBox.warning(None, "Peringatan", "Stok barang tidak boleh negatif!")
            return

        if not self.checkNoExpired.isChecked():
            tgl_kdluarsa = self.tgl_kdluarsa.date().toString("yyyy-MM-dd")
            if not self.tgl_kdluarsa.date().isValid():
                QMessageBox.warning(None, "Peringatan", "Tanggal kadaluarsa harus diisi!")
                return
        else:
            tgl_kdluarsa = "-"

        try:
            conn = sqlite3.connect("gudang.db")
            cursor = conn.cursor()

            # Buat tabel jika belum ada
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS barang (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nama TEXT,
                    kategori TEXT,
                    stok INTEGER,
                    harga REAL,
                    tgl_masuk TEXT,
                    tgl_kadaluarsa TEXT,
                    status TEXT
                )
            """)

            # Hitung status berdasarkan stok dan tanggal kadaluarsa
            tgl_kadaluarsa_qdate = self.tgl_kdluarsa.date()
            tgl_kadaluarsa_str = tgl_kadaluarsa_qdate.toString("yyyy-MM-dd")
            tgl_kadaluarsa = datetime.strptime(tgl_kadaluarsa_str, "%Y-%m-%d")
            today = datetime.today()

            if tgl_kdluarsa != "-":
                tgl_kadaluarsa = datetime.strptime(tgl_kdluarsa, "%Y-%m-%d")
                today = datetime.today()

                if stok == 0:
                    status = "Habis"
                elif tgl_kadaluarsa < today:
                    status = "Kadaluarsa"
                else:
                    status = ""
            else:
                status = "Tanpa Kadaluarsa" if stok > 0 else "Habis"

            # Simpan data
            cursor.execute("""
                INSERT INTO barang (nama, kategori, stok, harga, tgl_masuk, tgl_kadaluarsa, status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (nama, kategori, stok, harga, tgl_masuk, tgl_kadaluarsa_str, status))

            conn.commit()
            conn.close()

            QMessageBox.information(None, "Berhasil", "Data berhasil disimpan!")
            # Reset semua field setelah menyimpan
            self.nama_barang.clear()
            self.kategori.setCurrentIndex(-1)  # Reset combobox ke posisi kosong
            self.stok.setValue(0)
            self.harga_brng.setValue(0.0)

            self.muat_dock_list()
            self.tampilkan_data()

        except Exception as e:
            QMessageBox.critical(None, "Error", f"Gagal menyimpan data:\n{str(e)}")

    def terapkan_stylesheet_tab(self):
        style = """
        QWidget{
            background-color: rgb(168, 203, 226);
        }

        QLabel {
            font-size: 20px;
            font-weight: normal;
        }

        QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QDateEdit, QTextEdit {
            background-color: white;
            padding: 4px;
            color: balck;
            border-radius: 4px;
            border: 1px solid gray;
        }

        QComboBox QAbstractItemView{
            background-color: white;
            color: balck;
        }

        QPushButton {
            background-color: #0B0B57;
            color: white;
            padding: 6px;
            font-weight: bold;
            border-radius: 8px;
        }

        QPushButton:hover {
            background-color: #1A1A8F;
        }

        QTableWidget {
            background-color: white;
            border: 1px solid gray;
        }

        QTabWidget::pane {
            border: none;
        }
        """
        self.centralwidget.setStyleSheet(style)
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())